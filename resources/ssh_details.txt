beacon> help cd
Use: cd [directory]

Change directory on host

beacon> help clear
Use: clear

Clear task queue

beacon> help download
Use: download [file]

Download a file. Go to View -> Downloads to see it

beacon> help shell
Use: shell [command] [arguments]

Execute the command via the shell

beacon> help exit
Use: exit

Terminate this session

beacon> help help
Use: help [command]

Display help for a command

beacon> help socks
Use: socks [stop|port]

Starts a SOCKS4a server on the specified port. This server will relay
connections through this SSH session. (Cool? Yes. I think so!)

Use socks stop to stop the SOCKS4a server and terminate existing connections.

Traffic will not relay while parent Beacon is asleep. Change the sleep time with 
the sleep command to reduce latency.

NOTE: This SSH client does not support multiple asynchronous connection requests.
Each outgoing connection will block this agent until the connection fails or
succeeds. I do not recommend pushing a port scan through this SOCKS proxy.

beacon> help sleep
Use: sleep [time in seconds] <jitter>

Passes a sleep command up to this session's parent Beacon.

beacon> help upload
Use: upload [/path/to/file]

Upload a file to host

beacon> help pwd
Use: pwd

Displays the current working directory of this Beacon.

beacon> help rportfwd_local
Use: rportfwd_local [bind port] [forward host] [forward port]
     rportfwd_local stop [bind port]

Binds the specified port on the target host. When a connection comes in,
Cobalt Strike will make a connection to the forwarded host/port, via your
Cobalt Strike client, and use Beacon+SSH to relay traffic between the two connections.

Note: your SSH daemon may force this bound port to listen on loopback only. Set the
GatewayPorts option in the sshd_config file to yes or clientspecified to get around
this.

beacon> help rportfwd
Use: rportfwd [bind port] [forward host] [forward port]
     rportfwd stop [bind port]

Binds the specified port on the target host. When a connection comes in,
Cobalt Strike will make a connection to the forwarded host/port and use Beacon+SSH 
to relay traffic between the two connections.

Note: your SSH daemon may force this bound port to listen on loopback only. Set the
GatewayPorts option in the sshd_config file to yes or clientspecified to get around
this.

beacon> help sudo
Use: sudo [password] [command]

Elevate via sudo with the specified password and run the specified command.

beacon> help download
Use: download [file]

Download a file. Go to View -> Downloads to see it

beacon> help upload
Use: upload [/path/to/file]

Upload a file to host

beacon> help connect
Use: connect [target]

Connect to a TCP Beacon and re-establish control of it. All requests for
connected Beacon will go through this SSH session.

beacon> help unlink
Use: unlink [ip address]

Disconnect the specified TCP Beacon.

beacon> help history
Use: history
     history all
     history [number]

Show the command history.

Use history without the [number] argument to list all the commands in the
history.

Use history without the all argument to list all the commands in the
history.

Use history with the [number] argument to only show that number of most
recent commands.

beacon> help !
Use: !!
     ![number]
     ! [number]
     ![string]
     ! [string]
     !?[string]
     ! ?[string]

Run a command from the history. The history can be viewed using the history command.

"!!" runs the most recent command from the history. Equivalent to running "!-1" or "! -1".

"![number]" or "! [number]" run a specific command from the history.
   when a positive number it runs the command at that number in the history (e.g. !1 is the command at position 1 in the history)
   when a negative number it runs the command which is that number of commands back in the history (e.g. !-1 is the last command)

"![string]" or "! [string]" find the most recent command in the history that starts with the string and run it.

"!?[string]" or "! ?[string]" find the most recent command in the history that contains the string and run it.
