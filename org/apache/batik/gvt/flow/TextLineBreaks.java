package org.apache.batik.gvt.flow;

import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import java.util.HashSet;
import java.util.Set;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;

public class TextLineBreaks {
   public static final AttributedCharacterIterator.Attribute WORD_LIMIT = new GVTAttributedCharacterIterator.TextAttribute("WORD_LIMIT");
   public static final AttributedCharacterIterator.Attribute FLOW_PARAGRAPH;
   public static final AttributedCharacterIterator.Attribute FLOW_LINE_BREAK;
   static Set lineBrks;
   public static final char CHAR_ZERO_WIDTH_JOINER = '\u200d';
   protected static final int QUICK_LUT_SIZE = 256;
   public static final byte BREAK_ACTION_DIRECT = 0;
   public static final byte BREAK_ACTION_INDIRECT = 1;
   public static final byte BREAK_ACTION_PROHIBITED = 2;
   public static final String[] brkStrs;
   public static final byte CHAR_CLASS_OP = 0;
   public static final byte CHAR_CLASS_CL = 1;
   public static final byte CHAR_CLASS_QU = 2;
   public static final byte CHAR_CLASS_GL = 3;
   public static final byte CHAR_CLASS_NS = 4;
   public static final byte CHAR_CLASS_EX = 5;
   public static final byte CHAR_CLASS_SY = 6;
   public static final byte CHAR_CLASS_IS = 7;
   public static final byte CHAR_CLASS_PR = 8;
   public static final byte CHAR_CLASS_PO = 9;
   public static final byte CHAR_CLASS_NU = 10;
   public static final byte CHAR_CLASS_AL = 11;
   public static final byte CHAR_CLASS_ID = 12;
   public static final byte CHAR_CLASS_IN = 13;
   public static final byte CHAR_CLASS_HY = 14;
   public static final byte CHAR_CLASS_BA = 15;
   public static final byte CHAR_CLASS_BB = 16;
   public static final byte CHAR_CLASS_B2 = 17;
   public static final byte CHAR_CLASS_ZW = 18;
   public static final byte CHAR_CLASS_CM = 19;
   public static final byte CHAR_CLASS_SA = 20;
   public static final byte CHAR_CLASS_SP = 21;
   public static final byte CHAR_CLASS_BK = 22;
   public static final byte CHAR_CLASS_AI = 11;
   public static final byte CHAR_CLASS_CR = 24;
   public static final byte CHAR_CLASS_LF = 25;
   public static final byte CHAR_CLASS_SG = 11;
   public static final byte CHAR_CLASS_XX = 11;
   public static final byte CHAR_CLASS_CB = 28;
   public static final String[] clsStrs;
   static byte[][] brkPairs;
   static byte[] quickLut;
   static final char[] raw_data;
   static final byte[] raw_classes;

   static int findComplexBreak(AttributedCharacterIterator aci) {
      int cnt = 0;

      for(char ch = aci.current(); ch == '\uffff' && getCharCharClass(ch) == 20; ++cnt) {
         ch = aci.next();
      }

      return cnt;
   }

   public static void findLineBrk(AttributedString as) {
      AttributedCharacterIterator aci = as.getIterator();
      if (aci.getEndIndex() != 0) {
         char ch = aci.current();
         char prevCh = '\uffff';
         byte cls = getCharCharClass(ch);
         if (cls == 25) {
            cls = 22;
         }

         byte prevCls = cls;
         byte prevPrevCls = -1;
         int wordCnt = 0;
         int wordBegin = aci.getBeginIndex();
         int ich = wordBegin + 1;
         int lineEnd = aci.getRunLimit(lineBrks);
         if (cls >= 19) {
            cls = 11;
         }

         byte curCls;
         for(ch = aci.next(); ch != '\uffff'; prevCls = curCls) {
            if (ich == lineEnd) {
               as.addAttribute(WORD_LIMIT, wordCnt++, wordBegin, ich);
               wordBegin = ich;
               cls = getCharCharClass(ch);
               curCls = cls;
               prevCls = cls;
               if (cls >= 19) {
                  cls = 11;
               }

               lineEnd = aci.getRunLimit(lineBrks);
            } else {
               curCls = getCharCharClass(ch);
               if (curCls != 21) {
                  if (curCls == 20) {
                     ich += findComplexBreak(aci);
                     ch = aci.previous();
                     if (ch != '\uffff') {
                        prevCls = getCharCharClass(ch);
                     }

                     ch = aci.next();
                     if (ch != '\uffff') {
                        curCls = cls = getCharCharClass(ch);
                     }
                  } else if (ch != 8205 && prevCh != 8205) {
                     if (curCls != 22 && curCls != 25) {
                        if (prevCls == 24) {
                           as.addAttribute(WORD_LIMIT, wordCnt++, wordBegin, ich - 1);
                           wordBegin = ich - 1;
                           cls = 22;
                        } else if (curCls != 24) {
                           if (curCls == 19) {
                              if (prevCls == 21) {
                                 cls = 12;
                                 if (prevPrevCls != -1 && brkPairs[prevPrevCls][12] == 0) {
                                    as.addAttribute(WORD_LIMIT, wordCnt++, wordBegin, ich - 1);
                                    wordBegin = ich - 1;
                                 }
                              }
                           } else if (cls == 22) {
                              cls = curCls;
                           } else {
                              byte brk = brkPairs[cls][curCls];
                              if (brk == 0) {
                                 as.addAttribute(WORD_LIMIT, wordCnt++, wordBegin, ich);
                                 wordBegin = ich;
                              } else if (brk == 1 && prevCls == 21) {
                                 as.addAttribute(WORD_LIMIT, wordCnt++, wordBegin, ich);
                                 wordBegin = ich;
                              }

                              cls = curCls;
                           }
                        }
                     } else {
                        as.addAttribute(WORD_LIMIT, wordCnt++, wordBegin, ich);
                        wordBegin = ich;
                        cls = 22;
                     }
                  }
               }
            }

            ++ich;
            prevCh = ch;
            ch = aci.next();
            prevPrevCls = prevCls;
         }

         as.addAttribute(WORD_LIMIT, wordCnt++, wordBegin, ich);
      }
   }

   public static byte[] stringToLineBreakClasses(String s) {
      int len = s.length();
      byte[] ret = new byte[len];

      for(int i = 0; i < len; ++i) {
         ret[i] = getCharCharClass(s.charAt(i));
      }

      return ret;
   }

   public static byte getCharCharClass(char ch) {
      if (ch < 256) {
         if (quickLut == null) {
            buildQuickLut();
         }

         return quickLut[ch];
      } else {
         int len = raw_data.length;
         int l = 0;
         int r = len / 2 - 1;

         int entry;
         for(entry = (l + r) / 2; l <= r; entry = (l + r) / 2) {
            char min = raw_data[2 * entry];
            char max = raw_data[2 * entry + 1];
            if (ch < min) {
               r = entry - 1;
            } else {
               if (ch <= max) {
                  break;
               }

               l = entry + 1;
            }
         }

         return raw_classes[entry];
      }
   }

   protected static void buildQuickLut() {
      int entry = 0;
      quickLut = new byte[256];

      for(int i = 0; i < 256; ++entry) {
         int max = raw_data[2 * entry + 1];
         byte cls = raw_classes[entry];

         while(i <= max) {
            quickLut[i] = cls;
            ++i;
            if (i >= 256) {
               break;
            }
         }
      }

   }

   static {
      FLOW_PARAGRAPH = GVTAttributedCharacterIterator.TextAttribute.FLOW_PARAGRAPH;
      FLOW_LINE_BREAK = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      lineBrks = new HashSet();
      lineBrks.add(FLOW_PARAGRAPH);
      lineBrks.add(FLOW_LINE_BREAK);
      brkStrs = new String[]{"DB", "IB", "PB"};
      clsStrs = new String[]{"OP", "CL", "QU", "GL", "NS", "EX", "SY", "IS", "PR", "PO", "NU", "AL", "ID", "IN", "HY", "BA", "BB", "B2", "ZW", "CM", "SA", "SP", "BK", "AI", "CR", "LF", "SG", "XX", "CB"};
      brkPairs = new byte[][]{{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1}, {0, 2, 1, 1, 2, 2, 2, 2, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1}, {1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1}, {1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1}, {0, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1}};
      quickLut = null;
      raw_data = new char[]{'\u0000', '\b', '\t', '\t', '\n', '\n', '\u000b', '\u000b', '\f', '\f', '\r', '\r', '\u000e', '\u001f', ' ', ' ', '!', '!', '"', '"', '#', '#', '$', '$', '%', '%', '&', '&', '\'', '\'', '(', '(', ')', ')', '*', '*', '+', '+', ',', ',', '-', '-', '.', '.', '/', '/', '0', '9', ':', ';', '<', '>', '?', '?', '@', 'Z', '[', '[', '\\', '\\', ']', ']', '^', 'z', '{', '{', '|', '|', '}', '}', '~', '~', '\u007f', '\u009f', ' ', ' ', '¡', '¡', '¢', '¢', '£', '¥', '¦', '¦', '§', '¨', '©', '©', 'ª', 'ª', '«', '«', '¬', '¬', '\u00ad', '\u00ad', '®', '¯', '°', '°', '±', '±', '²', '³', '´', '´', 'µ', 'µ', '¶', 'º', '»', '»', '¼', '¿', 'À', 'Å', 'Æ', 'Æ', 'Ç', 'Ï', 'Ð', 'Ð', 'Ñ', 'Ö', '×', 'Ø', 'Ù', 'Ý', 'Þ', 'á', 'â', 'å', 'æ', 'æ', 'ç', 'ç', 'è', 'ê', 'ë', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ð', 'ñ', 'ñ', 'ò', 'ó', 'ô', 'ö', '÷', 'ú', 'û', 'û', 'ü', 'ü', 'ý', 'ý', 'þ', 'þ', 'ÿ', 'Ā', 'ā', 'ā', 'Ă', 'Đ', 'đ', 'đ', 'Ē', 'Ē', 'ē', 'ē', 'Ĕ', 'Ě', 'ě', 'ě', 'Ĝ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'Ī', 'ī', 'ī', 'Ĭ', 'İ', 'ı', 'ĳ', 'Ĵ', 'ķ', 'ĸ', 'ĸ', 'Ĺ', 'ľ', 'Ŀ', 'ł', 'Ń', 'Ń', 'ń', 'ń', 'Ņ', 'Ň', 'ň', 'Ŋ', 'ŋ', 'Ō', 'ō', 'ō', 'Ŏ', 'ő', 'Œ', 'œ', 'Ŕ', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'Ū', 'ū', 'ū', 'Ŭ', 'Ǎ', 'ǎ', 'ǎ', 'Ǐ', 'Ǐ', 'ǐ', 'ǐ', 'Ǒ', 'Ǒ', 'ǒ', 'ǒ', 'Ǔ', 'Ǔ', 'ǔ', 'ǔ', 'Ǖ', 'Ǖ', 'ǖ', 'ǖ', 'Ǘ', 'Ǘ', 'ǘ', 'ǘ', 'Ǚ', 'Ǚ', 'ǚ', 'ǚ', 'Ǜ', 'Ǜ', 'ǜ', 'ǜ', 'ǝ', 'ɐ', 'ɑ', 'ɑ', 'ɒ', 'ɠ', 'ɡ', 'ɡ', 'ɢ', 'ˆ', 'ˇ', 'ˇ', 'ˈ', 'ˈ', 'ˉ', 'ˋ', 'ˌ', 'ˌ', 'ˍ', 'ˍ', 'ˎ', 'ˏ', 'ː', 'ː', 'ˑ', '˗', '˘', '˛', '˜', '˜', '˝', '˝', '˞', 'ˮ', '̀', 'ͯ', 'ʹ', 'ΐ', 'Α', 'Ω', 'Ϊ', 'ΰ', 'α', 'ρ', 'ς', 'ς', 'σ', 'ω', 'ϊ', 'Ѐ', 'Ё', 'Ё', 'Ђ', 'Џ', 'А', 'я', 'ѐ', 'ѐ', 'ё', 'ё', 'ђ', '҂', '҃', '҉', 'Ҋ', 'և', '։', '։', '֊', '֊', '֑', 'ֽ', '־', '־', 'ֿ', 'ֿ', '׀', '׀', 'ׁ', 'ׂ', '׃', '׃', 'ׄ', 'ׄ', 'א', 'ي', 'ً', 'ٕ', '٠', '٩', '٪', 'ٯ', 'ٰ', 'ٰ', 'ٱ', 'ە', 'ۖ', 'ۤ', 'ۥ', 'ۦ', 'ۧ', 'ۨ', '۩', '۩', '۪', 'ۭ', '۰', '۹', 'ۺ', '܍', '\u070f', '\u070f', 'ܐ', 'ܐ', 'ܑ', 'ܑ', 'ܒ', 'ܬ', 'ܰ', '݊', 'ހ', 'ޥ', 'ަ', 'ް', 'ޱ', 'ޱ', 'ँ', 'ः', 'अ', 'ह', '़', '़', 'ऽ', 'ऽ', 'ा', '्', 'ॐ', 'ॐ', '॑', '॔', 'क़', 'ॡ', 'ॢ', 'ॣ', '।', '॥', '०', '९', '॰', '॰', 'ঁ', 'ঃ', 'অ', 'হ', '়', 'ৗ', 'ড়', 'ৡ', 'ৢ', 'ৣ', '০', '৯', 'ৰ', 'ৱ', '৲', '৳', '৴', '৺', 'ਂ', 'ਂ', 'ਅ', 'ਹ', '਼', '੍', 'ਖ਼', 'ਫ਼', '੦', '੯', 'ੰ', 'ੱ', 'ੲ', 'ੴ', 'ઁ', 'ઃ', 'અ', 'હ', '઼', '઼', 'ઽ', 'ઽ', 'ા', '્', 'ૐ', 'ૠ', '૦', '૯', 'ଁ', 'ଃ', 'ଅ', 'ହ', '଼', '଼', 'ଽ', 'ଽ', 'ା', 'ୗ', 'ଡ଼', 'ୡ', '୦', '୯', '୰', '୰', 'ஂ', 'ஂ', 'ஃ', 'ஹ', 'ா', 'ௗ', '௧', '௯', '௰', '௲', 'ఁ', 'ః', 'అ', 'హ', 'ా', 'ౖ', 'ౠ', 'ౡ', '౦', '౯', 'ಂ', 'ಃ', 'ಅ', 'ಹ', 'ಾ', 'ೖ', 'ೞ', 'ೡ', '೦', '೯', 'ം', 'ഃ', 'അ', 'ഹ', 'ാ', 'ൗ', 'ൠ', 'ൡ', '൦', '൯', 'ං', 'ඃ', 'අ', 'ෆ', '්', 'ෳ', '෴', '෴', 'ก', 'ะ', 'ั', 'ั', 'า', 'ำ', 'ิ', 'ฺ', '฿', '฿', 'เ', 'ๆ', '็', '๎', '๏', '๏', '๐', '๙', '๚', '๛', 'ກ', 'ະ', 'ັ', 'ັ', 'າ', 'ຳ', 'ິ', 'ຼ', 'ຽ', 'ໆ', '່', 'ໍ', '໐', '໙', 'ໜ', 'ໝ', 'ༀ', '༊', '་', '་', '༌', '༌', '།', '༗', '༘', '༙', '༚', '༟', '༠', '༩', '༪', '༴', '༵', '༵', '༶', '༶', '༷', '༷', '༸', '༸', '༹', '༹', '༺', '༺', '༻', '༻', '༼', '༼', '༽', '༽', '༾', '༿', 'ཀ', 'ཪ', 'ཱ', '྄', '྅', '྅', '྆', '྇', 'ྈ', 'ྋ', 'ྐ', 'ྼ', '྾', '࿅', '࿆', '࿆', '࿇', '࿏', 'က', 'ဪ', 'ာ', '္', '၀', '၉', '၊', '၏', 'ၐ', 'ၕ', 'ၖ', 'ၙ', 'Ⴀ', '჻', 'ᄀ', 'ᅟ', 'ᅠ', 'ᇹ', 'ሀ', 'ፚ', '፡', '፡', '።', '፨', '፩', '፱', '፲', 'ᙶ', ' ', ' ', 'ᚁ', 'ᚚ', '᚛', '᚛', '᚜', '᚜', 'ᚠ', 'ᜑ', 'ᜒ', '᜔', 'ᜠ', 'ᜱ', 'ᜲ', '᜴', '᜵', 'ᝑ', 'ᝒ', 'ᝓ', 'ᝠ', 'ᝰ', 'ᝲ', 'ᝳ', 'ក', 'ឳ', '឴', '៓', '។', '។', '៕', '៕', '៖', '៚', '៛', '៛', 'ៜ', 'ៜ', '០', '៩', '᠀', '᠅', '᠆', '᠆', '᠇', '᠊', '᠋', '\u180e', '᠐', '᠙', 'ᠠ', 'ᢨ', 'ᢩ', 'ᢩ', 'Ḁ', '῾', ' ', ' ', ' ', ' ', ' ', ' ', '\u200b', '\u200b', '\u200c', '\u200f', '‐', '‐', '‑', '‑', '‒', '–', '—', '—', '―', '‖', '‗', '‗', '‘', '’', '‚', '‚', '‛', '”', '„', '„', '‟', '‟', '†', '‡', '•', '‣', '․', '…', '‧', '‧', '\u2028', '\u2029', '\u202a', '\u202e', ' ', ' ', '‰', '‷', '‸', '‸', '‹', '›', '※', '※', '‼', '‼', '‽', '⁃', '⁄', '⁄', '⁅', '⁅', '⁆', '⁆', '⁇', '⁗', ' ', ' ', '\u2060', '\u2060', '\u2061', '\u2063', '\u206a', '\u206f', '⁰', 'ⁱ', '⁴', '⁴', '⁵', '⁼', '⁽', '⁽', '⁾', '⁾', 'ⁿ', 'ⁿ', '₀', '₀', '₁', '₄', '₅', '₌', '₍', '₍', '₎', '₎', '₠', '₦', '₧', '₧', '₨', '₱', '⃐', '⃪', '℀', 'ℂ', '℃', '℃', '℄', '℄', '℅', '℅', '℆', '℈', '℉', '℉', 'ℊ', 'ℒ', 'ℓ', 'ℓ', '℔', 'ℕ', '№', '№', '℗', '℠', '℡', '™', '℣', '℥', 'Ω', 'Ω', '℧', 'K', 'Å', 'Å', 'ℬ', 'ℿ', '⅀', '⅀', '⅁', '⅓', '⅔', '⅕', '⅖', '⅚', '⅛', '⅛', '⅜', '⅝', '⅞', '⅞', '⅟', '⅟', 'Ⅰ', 'Ⅻ', 'Ⅼ', 'Ⅿ', 'ⅰ', 'ⅹ', 'ⅺ', 'Ↄ', '←', '↙', '↚', '⇑', '⇒', '⇒', '⇓', '⇓', '⇔', '⇔', '⇕', '⇿', '∀', '∀', '∁', '∁', '∂', '∃', '∄', '∆', '∇', '∈', '∉', '∊', '∋', '∋', '∌', '∎', '∏', '∏', '∐', '∐', '∑', '∑', '−', '∓', '∔', '∔', '∕', '∕', '∖', '∙', '√', '√', '∛', '∜', '∝', '∠', '∡', '∢', '∣', '∣', '∤', '∤', '∥', '∥', '∦', '∦', '∧', '∬', '∭', '∭', '∮', '∮', '∯', '∳', '∴', '∷', '∸', '∻', '∼', '∽', '∾', '≇', '≈', '≈', '≉', '≋', '≌', '≌', '≍', '≑', '≒', '≒', '≓', '≟', '≠', '≡', '≢', '≣', '≤', '≧', '≨', '≩', '≪', '≫', '≬', '≭', '≮', '≯', '≰', '⊁', '⊂', '⊃', '⊄', '⊅', '⊆', '⊇', '⊈', '⊔', '⊕', '⊕', '⊖', '⊘', '⊙', '⊙', '⊚', '⊤', '⊥', '⊥', '⊦', '⊾', '⊿', '⊿', '⋀', '⌑', '⌒', '⌒', '⌓', '⌨', '〈', '〈', '〉', '〉', '⌫', '⎳', '⎴', '⎴', '⎵', '⎵', '⎶', '⎶', '⎷', '⑊', '①', 'Ⓙ', 'Ⓚ', 'Ⓩ', 'ⓐ', 'ⓩ', '⓪', '⓪', '⓫', '╋', '╌', '╏', '═', '╴', '╵', '╿', '▀', '▏', '▐', '░', '▒', '▕', '▖', '▟', '■', '□', '▢', '▢', '▣', '▩', '▪', '▱', '▲', '△', '▴', '▵', '▶', '▷', '▸', '▻', '▼', '▽', '▾', '▿', '◀', '◁', '◂', '◅', '◆', '◈', '◉', '◊', '○', '○', '◌', '◍', '◎', '◑', '◒', '◡', '◢', '◥', '◦', '◮', '◯', '◯', '◰', '☄', '★', '☆', '☇', '☈', '☉', '☉', '☊', '☍', '☎', '☏', '☐', '☓', '☖', '☗', '☙', '☛', '☜', '☜', '☝', '☝', '☞', '☞', '☟', '☿', '♀', '♀', '♁', '♁', '♂', '♂', '♃', '♟', '♠', '♡', '♢', '♢', '♣', '♥', '♦', '♦', '♧', '♪', '♫', '♫', '♬', '♭', '♮', '♮', '♯', '♯', '♰', '❚', '❛', '❞', '❡', '❡', '❢', '❣', '❤', '❧', '❨', '❨', '❩', '❩', '❪', '❪', '❫', '❫', '❬', '❬', '❭', '❭', '❮', '❮', '❯', '❯', '❰', '❰', '❱', '❱', '❲', '❲', '❳', '❳', '❴', '❴', '❵', '❵', '❶', '⟥', '⟦', '⟦', '⟧', '⟧', '⟨', '⟨', '⟩', '⟩', '⟪', '⟪', '⟫', '⟫', '⟰', '⦂', '⦃', '⦃', '⦄', '⦄', '⦅', '⦅', '⦆', '⦆', '⦇', '⦇', '⦈', '⦈', '⦉', '⦉', '⦊', '⦊', '⦋', '⦋', '⦌', '⦌', '⦍', '⦍', '⦎', '⦎', '⦏', '⦏', '⦐', '⦐', '⦑', '⦑', '⦒', '⦒', '⦓', '⦓', '⦔', '⦔', '⦕', '⦕', '⦖', '⦖', '⦗', '⦗', '⦘', '⦘', '⦙', '⧗', '⧘', '⧘', '⧙', '⧙', '⧚', '⧚', '⧛', '⧛', '⧜', '⧻', '⧼', '⧼', '⧽', '⧽', '⧾', '⫿', '⺀', '　', '、', '。', '〃', '〄', '々', '々', '〆', '〇', '〈', '〈', '〉', '〉', '《', '《', '》', '》', '「', '「', '」', '」', '『', '『', '』', '』', '【', '【', '】', '】', '〒', '〓', '〔', '〔', '〕', '〕', '〖', '〖', '〗', '〗', '〘', '〘', '〙', '〙', '〚', '〚', '〛', '〛', '〜', '〜', '〝', '〝', '〞', '〟', '〠', '〩', '〪', '〯', '〰', '〺', '〻', '〼', '〽', '〿', 'ぁ', 'ぁ', 'あ', 'あ', 'ぃ', 'ぃ', 'い', 'い', 'ぅ', 'ぅ', 'う', 'う', 'ぇ', 'ぇ', 'え', 'え', 'ぉ', 'ぉ', 'お', 'ぢ', 'っ', 'っ', 'つ', 'も', 'ゃ', 'ゃ', 'や', 'や', 'ゅ', 'ゅ', 'ゆ', 'ゆ', 'ょ', 'ょ', 'よ', 'ろ', 'ゎ', 'ゎ', 'わ', 'ゔ', 'ゕ', 'ゖ', '゙', '゚', '゛', 'ゞ', 'ゟ', 'ゟ', '゠', 'ァ', 'ア', 'ア', 'ィ', 'ィ', 'イ', 'イ', 'ゥ', 'ゥ', 'ウ', 'ウ', 'ェ', 'ェ', 'エ', 'エ', 'ォ', 'ォ', 'オ', 'ヂ', 'ッ', 'ッ', 'ツ', 'モ', 'ャ', 'ャ', 'ヤ', 'ヤ', 'ュ', 'ュ', 'ユ', 'ユ', 'ョ', 'ョ', 'ヨ', 'ロ', 'ヮ', 'ヮ', 'ワ', 'ヴ', 'ヵ', 'ヶ', 'ヷ', 'ヺ', '・', '・', 'ー', 'ー', 'ヽ', 'ヽ', 'ヾ', 'ㆷ', 'ㇰ', 'ㇿ', '㈀', '힣', '\ud800', '\udfff', '\ue000', '\uf8ff', '豈', '頻', 'ﬀ', 'יִ', 'ﬞ', 'ﬞ', 'ײַ', 'ﴽ', '﴾', '﴾', '﴿', '﴿', 'ﵐ', 'ﷻ', '﷼', '﷼', '︀', '︣', '︰', '︴', '︵', '︵', '︶', '︶', '︷', '︷', '︸', '︸', '︹', '︹', '︺', '︺', '︻', '︻', '︼', '︼', '︽', '︽', '︾', '︾', '︿', '︿', '﹀', '﹀', '﹁', '﹁', '﹂', '﹂', '﹃', '﹃', '﹄', '﹄', '﹅', '﹏', '﹐', '﹐', '﹑', '﹑', '﹒', '﹒', '﹔', '﹕', '﹖', '﹗', '﹘', '﹘', '﹙', '﹙', '﹚', '﹚', '﹛', '﹛', '﹜', '﹜', '﹝', '﹝', '﹞', '﹞', '﹟', '﹨', '﹩', '﹩', '﹪', '﹪', '﹫', '﹫', 'ﹰ', 'ﻼ', '\ufeff', '\ufeff', '！', '！', '＂', '＃', '＄', '＄', '％', '％', '＆', '＇', '（', '（', '）', '）', '＊', '＋', '，', '，', '－', '－', '．', '．', '／', '９', '：', '；', '＜', '＞', '？', '？', '＠', 'Ｚ', '［', '［', '＼', '＼', '］', '］', '＾', 'ｚ', '｛', '｛', '｜', '｜', '｝', '｝', '～', '～', '｟', '｟', '｠', '｡', '｢', '｢', '｣', '､', '･', '･', 'ｦ', 'ｦ', 'ｧ', 'ｰ', 'ｱ', 'ﾝ', 'ﾞ', 'ﾟ', 'ﾠ', 'ￜ', '￠', '￠', '￡', '￡', '￢', '￤', '￥', '￦', '￨', '￮', '\ufff9', '\ufffb', '￼', '￼', '�', '\uffff'};
      raw_classes = new byte[]{19, 15, 25, 19, 22, 24, 19, 21, 5, 2, 11, 8, 9, 11, 2, 0, 1, 11, 8, 7, 14, 7, 6, 10, 7, 11, 5, 11, 0, 8, 1, 11, 0, 15, 1, 11, 19, 3, 11, 9, 8, 11, 11, 11, 11, 2, 11, 15, 11, 9, 8, 11, 16, 11, 11, 2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16, 11, 16, 11, 11, 11, 11, 11, 11, 11, 11, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 19, 11, 7, 15, 19, 11, 19, 11, 19, 11, 19, 11, 19, 10, 11, 19, 11, 19, 11, 19, 11, 19, 10, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 10, 11, 19, 11, 19, 11, 19, 10, 11, 8, 11, 19, 11, 19, 11, 10, 19, 11, 19, 11, 19, 11, 19, 11, 10, 19, 11, 19, 11, 19, 11, 10, 11, 19, 11, 19, 10, 11, 19, 11, 19, 11, 10, 19, 11, 19, 11, 10, 19, 11, 19, 11, 10, 19, 11, 19, 11, 20, 19, 20, 19, 8, 20, 19, 11, 10, 4, 20, 19, 20, 19, 20, 19, 10, 20, 11, 15, 3, 11, 19, 11, 10, 11, 19, 11, 19, 11, 19, 0, 1, 0, 1, 19, 11, 19, 11, 19, 11, 19, 11, 19, 11, 20, 19, 10, 11, 20, 19, 11, 12, 19, 11, 15, 11, 10, 11, 15, 11, 0, 1, 11, 19, 11, 19, 11, 19, 11, 19, 20, 19, 4, 15, 4, 8, 11, 10, 11, 16, 11, 19, 10, 11, 19, 11, 15, 3, 15, 18, 19, 15, 3, 15, 17, 11, 11, 2, 0, 2, 0, 2, 11, 11, 13, 15, 22, 19, 3, 9, 11, 2, 11, 4, 11, 4, 0, 1, 11, 15, 3, 11, 19, 11, 11, 11, 0, 1, 11, 11, 11, 11, 0, 1, 8, 9, 8, 19, 11, 9, 11, 11, 11, 9, 11, 11, 11, 8, 11, 11, 11, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 0, 1, 11, 0, 1, 2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 11, 5, 11, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 11, 0, 1, 0, 1, 0, 1, 11, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 11, 0, 1, 0, 1, 11, 0, 1, 11, 12, 1, 12, 4, 12, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 12, 0, 1, 0, 1, 0, 1, 0, 1, 4, 0, 1, 12, 19, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 19, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 11, 11, 12, 11, 19, 11, 0, 1, 11, 9, 19, 12, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 12, 1, 12, 1, 4, 5, 12, 0, 1, 0, 1, 0, 1, 12, 8, 9, 12, 11, 3, 5, 12, 8, 9, 12, 0, 1, 12, 1, 12, 1, 12, 4, 12, 5, 12, 0, 12, 1, 12, 0, 12, 1, 12, 0, 1, 0, 1, 4, 11, 4, 11, 4, 11, 9, 8, 12, 8, 11, 19, 28, 11};
   }
}
